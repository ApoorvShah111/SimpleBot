Controllers have the job of controlling and managing any device. It works by accepting environmental parameters (or Process variables) and reacts in different ways by changing the end process(or Set point) 
For example, when we have a contoller for an air conditioner, it takes in the Process Variable of what the current ambient temprature is and then based on that the command to the cooling unit differs (Set point)
For robotics and other software based controller applications, we use Programmable Logic controllers(PLC's).

Controllers can be applied in two ways:
  
  Open-loops: In this the process of the controller is independent of the process variable, for example if we create a bot that needs to move foreward at all times with the same       velocity no matter what.
  Close-loops: In this the process variable acts as an active parameter to the controller and effects the process it undergoes. For example, If we create a bot that needs to           follow a certain lane, the process variable is how the lane changes after the process that the controller undergoes. This feeds back into the controller and changes the next       process it takes. Hence it forms a closed loop.
The above is also an example of a feedback control system as it takes feedback from the process variables and changes its next outcome.

ON-Off control: In this the process is either on or off and based on whether PV mathes the SP.

PID controller (Propertional Integral Derivative) is a tri-controller consisting of:

    Propertoional control:In this type of control, effect of the controller is propertional to the difference between the PV and the SP (PV-SP). This means that the the effort by         the controller multiplicatively decreases as the PV gets closer to the SP. This is much faster than on-off control systems as larget PV-SP leads to more effort by the             conroller, but its less accurate as it always has some error, called offset error as th PV-SP never reaches 0, just keeps getting smaller. This can be shown mathematically         like-  (NEW CONTROLLER OUTPUT)=(OLD CONTROLLER OUTPUT)+K*(PV-SP)
    Integral control: In this type the cumelative errors are integrated over a time period and this past cumulative integral provieds info on how much effort is applied by the             controller. As the error decreases, the error is logged into the integral, hereby reducing the value of the integral, hence the effort slowly decreases. If due to the              effort inputted by the controller the error is logged in the opposte direction then it continues causing error by the integral value slowly increases again and it causes          the controller to input error ythe opposite way. This can be mathematically shown as (NEW CONTROLLER OUTPUT)=(OLD CONTROLLER OUTPUT)+K*(INTEGRAL[(PV-SP)dt])
    Derivative control: based on the current slope of the error-time graph (differential), the estimate to the future error values change the current effort put in. or in             mathematical way, (NEW CONTROLLER OUTPUT)=(OLD CONTROLLER OUTPUT)+K*(d(PV-SP)/dt)
All the above can be combined to form a combined equation where: (NEW CONTROLLER OUTPUT)=(OLD CONTROLLER OUTPUT)+[K*(PV-SP)+K*(INTEGRAL[(PV-SP)dt])+K*(d(PV-SP)/dt)] and this is the equation of the PID controller.

The implimentation of controllers in ROS:

In ROS the implication of coontrollers is managed by ROS_Control, where the large amount of preset controllers are stored in a controller manager. Here we can also add more controllers thqat we code of our own. Each of thse controller have theor own PID control systems where the CommandInterfaces provide the information to the hardware like the movement to be done by the joint and the effort to be put.There there StateInterfaces that take back information from the bot or the hardware andits sensors back to controlller and its PID, thius acts as the PV.
A few examples of such controllers that I used initially for my robot are:
    robot_state_controller:It provides back information as it is a StateInterface of the robots initial spawn
    joint_state_controller: It provides back information on the hardware interface.
Also another interesting note I forund out was that when we use teleop_twist package to control the robot, the package publishes to a controller and the package sets the SP while the controller (in my case the sikidsteer controller) moves the bot to reach the SP set by the teleop_keyboard package        
